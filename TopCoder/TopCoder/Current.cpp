#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>



#define FOR(i, a, b) for( int i = (a); i < (b); i++ )
#define ALL(A) (A.begin(), A.end())
#define Set(a, s) memset(a, s, sizeof (a))
#define pb push_back
#define mp make_pair
typedef long long LL;
using namespace std;
int oo=1<<25;


class ConundrumReloaded {
public:
	
string arr;
int n;

char sw(char c)
{
	if(c=='H')
		return 'L';
	else if(c=='L')
		return 'H';
	return '?';
}

int solve(int idx , char c, int )
{
	if(idx==arr.size())
	{
		return (arr[0]=='?') ? 0 : (arr[0]!=c);
	}
	int s1 = oo , s2 = oo , s3 = oo, s4 = oo;
	
	if(arr[idx]=='?')
	{
	s3 = solve(idx+1 , sw(arr[idx])) + 1;
	s4 = solve(idx+1 , arr[idx]);
	}
	else
	{

		s1 = solve(idx+1 , sw(arr[idx])) + (arr[idx]!=sw(arr[idx]));
	    s2 = solve(idx+1 , arr[idx]) + (arr[idx]!=c);
	}
	return min(min(s1,s2),min(s3,s4));

}
	int minimumLiars(string answers) {
			arr = answers;
			n = arr.size();
			int l =0;
			FOR(i,0,arr.size())
				l+=(arr[i]=='L');
			int res = solve(0, '?');
			return res;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	ConundrumReloaded *obj;
	int answer;
	obj = new ConundrumReloaded();
	clock_t startTime = clock();
	answer = obj->minimumLiars(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "LLH";
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "?" "?" "?" "?" "?";
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "LHLH?";
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "?" "?LLLLLL?" "?";
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "LLL";
	p1 = -1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING