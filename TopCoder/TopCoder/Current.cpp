#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>



#define FOR(i, a, b) for( int i = (a); i < (b); i++ )
#define ALL(A) A.begin(), A.end()
#define Set(a, s) memset(a, s, sizeof (a))
#define pb push_back
#define mp make_pair
typedef long long LL;
using namespace std;


class ConnectingGameDiv2 {
public:

	int n,m;
	vector <string>B;
	map<char,int>C;
	int F[2509];
	map<int, vector<int> >G;
	bool vis[60][60];
	map<char,bool>mvis;
	map<pair<char,char>,bool>D;
	set<int>S;
	set<int>E;
	int d[2509];
	int vis2[2509];

	bool val(int i , int j)
	{
		return (i>=0 && j>=0 && i<n && j<m);
	}
	int flood(int i ,int j, char c)
	{
		if(i<0 || j < 0 || i>=n || j>=m)return 0;
		if(vis[i][j] || B[i][j]!=c)return 0;
		vis[i][j]=1;
		int sum=1;
		sum+=flood(i+1,j,c);
		sum+=flood(i,j+1,c);
		sum+=flood(i-1,j,c);
		sum+=flood(i,j-1,c);
		return sum;
	}
	int getmin(vector <string> board) 
	{
		B=board;
		n=board.size();
		m=board[0].size();
		Set(vis,0);
		int dx[]={1,-1,0,0,1,1,-1,-1};
		int dy[]={0,0,-1,1,1,-1,1,-1};
		int c=0;
		FOR(i,0,n)
			FOR(j,0,m)
		{
			if(C.find(board[i][j])==C.end())
				C[board[i][j]] =c++;
		}
		mvis.clear();
		Set(vis,0);
		FOR(i,0,n)
			FOR(j,0,m)
			if(mvis[B[i][j]]==0)
				F[C[B[i][j]]]=flood(i,j,B[i][j]),mvis[B[i][j]]=1;

		FOR(i,0,n)
			FOR(j,0,m)
			FOR(k,0,8)
		{
			int x=i+dx[k];
			int y=j+dy[k];
			if(val(x,y) && B[i][j]!=B[x][y])
			{
				if(D[mp(B[i][j],B[x][y])]==0)
					G[C[B[i][j]]].push_back(C[B[x][y]]),D[mp(B[i][j],B[x][y])]=1;
				if(D[mp(B[x][y],B[i][j])]==0)
					G[C[B[x][y]]].push_back(C[B[i][j]]),D[mp(B[x][y],B[i][j])]=1;
			}
		}

		
		queue< int > Q;
		mvis.clear();
		FOR(i,0,2501)d[i]=1<<25;
		
		FOR(i,0,n)if(mvis[B[i][0]]==0)S.insert(C[B[i][0]]),Q.push(C[B[i][0]]),d[C[B[i][0]]]=F[C[B[i][0]]],mvis[B[i][0]]=1;;
		mvis.clear();
		FOR(i,0,n)if(mvis[B[i][m-1]]==0)E.insert(C[B[i][m-1]]),mvis[B[i][m-1]]=1;
		mvis.clear();
		while(Q.size())
		{
			int cur = Q.front();
			Q.pop();
			FOR(i,0,G[cur].size())
			{
				if(d[G[cur][i]]>d[cur]+F[G[cur][i]])
				{
					d[G[cur][i]]=d[cur]+F[G[cur][i]];
					Q.push(G[cur][i]);
				}
			}
		}
		int mini=1<<25;
		for(set<int>::iterator it = E.begin() ; it!=E.end() ; it++)
			mini = min(d[*it],mini);
		return mini;

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ConnectingGameDiv2 *obj;
	int answer;
	obj = new ConnectingGameDiv2();
	clock_t startTime = clock();
	answer = obj->getmin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
		// ----- test 0 -----
		string t0[] = {"AAAAAAaaabcdefg", "AAAAAAhhDDDDDDD", "AAAAiAjDDDDDDDD", "AAAAiijDDDDDDDD", "AAAAAAAkDDDDDDD", "AAAAoAAAlDDDDDD", "AAApBnAAlDDDDDD", "srqBBBmmmmDDDDD"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 26;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"AAB","ACD","CCD"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 4;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = {"iii","iwi","iii"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 8;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = {"rng58","Snuke","Sothe"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 6;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = {"yyAArJqjWTH5","yyEEruYYWTHG","hooEvutpkkb2","OooNgFFF9sbi","RRMNgFL99Vmm","R76XgFF9dVVV","SKnZUPf88Vee"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 14;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

/*
"AAAAAAaaabcdefg",
"AAAAAAhhDDDDDDD",
"AAAAiAjDDDDDDDD",
"AAAAiijDDDDDDDD",
"AAAAAAAkDDDDDDD",
"AAAAoAAAlDDDDDD",
"AAApBnAAlDDDDDD",
"srqBBBmmmmDDDDD"}
*/